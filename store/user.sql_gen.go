// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package store

import (
	"context"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO ibooking.users (User_Num, Password_Hash, User_Name)
VALUES ($1,
        $2,
        $3) RETURNING user_id, user_num, password_hash, user_name, credit
`

type CreateUsersParams struct {
	UserNum      string `json:"user_num"`
	PasswordHash string `json:"password_hash"`
	UserName     string `json:"user_name"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (IbookingUser, error) {
	row := q.db.QueryRowContext(ctx, createUsers, arg.UserNum, arg.PasswordHash, arg.UserName)
	var i IbookingUser
	err := row.Scan(
		&i.UserID,
		&i.UserNum,
		&i.PasswordHash,
		&i.UserName,
		&i.Credit,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE
FROM ibooking.users
WHERE user_id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_num, password_hash, user_name, credit
FROM ibooking.users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (IbookingUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i IbookingUser
	err := row.Scan(
		&i.UserID,
		&i.UserNum,
		&i.PasswordHash,
		&i.UserName,
		&i.Credit,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT user_id, user_num, password_hash, user_name, credit
FROM ibooking.users
WHERE user_num = $1
`

func (q *Queries) GetUserByName(ctx context.Context, userNum string) (IbookingUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, userNum)
	var i IbookingUser
	err := row.Scan(
		&i.UserID,
		&i.UserNum,
		&i.PasswordHash,
		&i.UserName,
		&i.Credit,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_num, password_hash, user_name, credit
FROM ibooking.users
ORDER BY user_num
`

func (q *Queries) ListUsers(ctx context.Context) ([]IbookingUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbookingUser{}
	for rows.Next() {
		var i IbookingUser
		if err := rows.Scan(
			&i.UserID,
			&i.UserNum,
			&i.PasswordHash,
			&i.UserName,
			&i.Credit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
