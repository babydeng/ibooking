// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: order.sql

package store

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO ibooking.rooms (
    Room_Name,
    Description
) VALUES (
             $1,
             $2
         ) RETURNING room_id, room_name, description
`

type CreateRoomParams struct {
	RoomName    string `json:"room_name"`
	Description string `json:"description"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (IbookingRoom, error) {
	row := q.db.QueryRowContext(ctx, createRoom, arg.RoomName, arg.Description)
	var i IbookingRoom
	err := row.Scan(&i.RoomID, &i.RoomName, &i.Description)
	return i, err
}

const createSeat = `-- name: CreateSeat :one
INSERT INTO ibooking.seats (
    Seat_Num,
    Room_ID,
    Description
) VALUES (
             $1,
             $2,
             $3
         ) RETURNING seat_id, room_id, seat_num, description
`

type CreateSeatParams struct {
	SeatNum     string `json:"seat_num"`
	RoomID      int64  `json:"room_id"`
	Description string `json:"description"`
}

func (q *Queries) CreateSeat(ctx context.Context, arg CreateSeatParams) (IbookingSeat, error) {
	row := q.db.QueryRowContext(ctx, createSeat, arg.SeatNum, arg.RoomID, arg.Description)
	var i IbookingSeat
	err := row.Scan(
		&i.SeatID,
		&i.RoomID,
		&i.SeatNum,
		&i.Description,
	)
	return i, err
}

const createUserOrder = `-- name: CreateUserOrder :one
INSERT INTO ibooking.orders (
    User_ID,
    Room_ID,
    Seat_ID,
    Start_Time,
    Date,
    End_Time
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6
         )  RETURNING order_id, user_id, room_id, seat_id, start_time, end_time, date, status
`

type CreateUserOrderParams struct {
	UserID    int64  `json:"user_id"`
	RoomID    int64  `json:"room_id"`
	SeatID    int64  `json:"seat_id"`
	StartTime string `json:"start_time"`
	Date      string `json:"date"`
	EndTime   string `json:"end_time"`
}

func (q *Queries) CreateUserOrder(ctx context.Context, arg CreateUserOrderParams) (IbookingOrder, error) {
	row := q.db.QueryRowContext(ctx, createUserOrder,
		arg.UserID,
		arg.RoomID,
		arg.SeatID,
		arg.StartTime,
		arg.Date,
		arg.EndTime,
	)
	var i IbookingOrder
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.RoomID,
		&i.SeatID,
		&i.StartTime,
		&i.EndTime,
		&i.Date,
		&i.Status,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM ibooking.orders
WHERE Order_ID = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, orderID)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT order_id, user_id, room_id, seat_id, start_time, end_time, date, status
FROM ibooking.orders
WHERE Order_ID = $1
`

func (q *Queries) GetOrder(ctx context.Context, orderID int64) (IbookingOrder, error) {
	row := q.db.QueryRowContext(ctx, getOrder, orderID)
	var i IbookingOrder
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.RoomID,
		&i.SeatID,
		&i.StartTime,
		&i.EndTime,
		&i.Date,
		&i.Status,
	)
	return i, err
}

const getOrderByRoom = `-- name: GetOrderByRoom :many
SELECT order_id, user_id, room_id, seat_id, start_time, end_time, date, status
FROM ibooking.orders
WHERE Date = $1 AND Room_ID = $2
`

type GetOrderByRoomParams struct {
	Date   string `json:"date"`
	RoomID int64  `json:"room_id"`
}

func (q *Queries) GetOrderByRoom(ctx context.Context, arg GetOrderByRoomParams) ([]IbookingOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByRoom, arg.Date, arg.RoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbookingOrder{}
	for rows.Next() {
		var i IbookingOrder
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.RoomID,
			&i.SeatID,
			&i.StartTime,
			&i.EndTime,
			&i.Date,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderBySeat = `-- name: GetOrderBySeat :many
SELECT order_id, user_id, room_id, seat_id, start_time, end_time, date, status
FROM ibooking.orders
WHERE Date = $1 AND Seat_ID = $2 AND Room_ID = $3
`

type GetOrderBySeatParams struct {
	Date   string `json:"date"`
	SeatID int64  `json:"seat_id"`
	RoomID int64  `json:"room_id"`
}

func (q *Queries) GetOrderBySeat(ctx context.Context, arg GetOrderBySeatParams) ([]IbookingOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrderBySeat, arg.Date, arg.SeatID, arg.RoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbookingOrder{}
	for rows.Next() {
		var i IbookingOrder
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.RoomID,
			&i.SeatID,
			&i.StartTime,
			&i.EndTime,
			&i.Date,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByUserID = `-- name: GetOrderByUserID :many
SELECT order_id, user_id, room_id, seat_id, start_time, end_time, date, status
FROM ibooking.orders
WHERE User_ID = $1
`

func (q *Queries) GetOrderByUserID(ctx context.Context, userID int64) ([]IbookingOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbookingOrder{}
	for rows.Next() {
		var i IbookingOrder
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.RoomID,
			&i.SeatID,
			&i.StartTime,
			&i.EndTime,
			&i.Date,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserOrders = `-- name: ListUserOrders :many
SELECT order_id, user_id, room_id, seat_id, start_time, end_time, date, status
FROM ibooking.orders
WHERE User_ID = $1
`

func (q *Queries) ListUserOrders(ctx context.Context, userID int64) ([]IbookingOrder, error) {
	rows, err := q.db.QueryContext(ctx, listUserOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbookingOrder{}
	for rows.Next() {
		var i IbookingOrder
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.RoomID,
			&i.SeatID,
			&i.StartTime,
			&i.EndTime,
			&i.Date,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE ibooking.orders SET
        Status = $1
WHERE Order_ID = $2 RETURNING order_id, user_id, room_id, seat_id, start_time, end_time, date, status
`

type UpdateOrderStatusParams struct {
	Status  int32 `json:"status"`
	OrderID int64 `json:"order_id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (IbookingOrder, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.Status, arg.OrderID)
	var i IbookingOrder
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.RoomID,
		&i.SeatID,
		&i.StartTime,
		&i.EndTime,
		&i.Date,
		&i.Status,
	)
	return i, err
}
